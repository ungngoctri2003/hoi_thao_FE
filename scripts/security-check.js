const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

/**
 * Ki·ªÉm tra b·∫£o m·∫≠t JWT secrets
 */
function checkJWTSecurity() {
  console.log('üîí Ki·ªÉm tra b·∫£o m·∫≠t JWT secrets...');
  
  const issues = [];
  const warnings = [];
  
  // Ki·ªÉm tra file .env.local frontend
  const frontendEnvPath = path.join(__dirname, '..', '.env.local');
  if (fs.existsSync(frontendEnvPath)) {
    const frontendEnv = fs.readFileSync(frontendEnvPath, 'utf8');
    
    // Ki·ªÉm tra JWT secrets kh√¥ng an to√†n
    if (frontendEnv.includes('NEXT_PUBLIC_JWT_ACCESS_SECRET=your_super_secret_access_key_here_change_in_production')) {
      issues.push('‚ùå Frontend: JWT_ACCESS_SECRET v·∫´n s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh kh√¥ng an to√†n');
    }
    
    if (frontendEnv.includes('NEXT_PUBLIC_JWT_REFRESH_SECRET=your_super_secret_refresh_key_here_change_in_production')) {
      issues.push('‚ùå Frontend: JWT_REFRESH_SECRET v·∫´n s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh kh√¥ng an to√†n');
    }
    
    // Ki·ªÉm tra ƒë·ªô d√†i JWT secrets
    const accessMatch = frontendEnv.match(/NEXT_PUBLIC_JWT_ACCESS_SECRET=(.+)/);
    const refreshMatch = frontendEnv.match(/NEXT_PUBLIC_JWT_REFRESH_SECRET=(.+)/);
    
    if (accessMatch && accessMatch[1].length < 32) {
      warnings.push('‚ö†Ô∏è  Frontend: JWT_ACCESS_SECRET qu√° ng·∫Øn (n√™n >= 32 k√Ω t·ª±)');
    }
    
    if (refreshMatch && refreshMatch[1].length < 32) {
      warnings.push('‚ö†Ô∏è  Frontend: JWT_REFRESH_SECRET qu√° ng·∫Øn (n√™n >= 32 k√Ω t·ª±)');
    }
  } else {
    warnings.push('‚ö†Ô∏è  Frontend: File .env.local kh√¥ng t·ªìn t·∫°i');
  }
  
  // Ki·ªÉm tra file .env backend
  const backendEnvPath = path.join(__dirname, '..', '..', 'HOI_THAO_BE', '.env');
  if (fs.existsSync(backendEnvPath)) {
    const backendEnv = fs.readFileSync(backendEnvPath, 'utf8');
    
    // Ki·ªÉm tra JWT secrets kh√¥ng an to√†n
    if (backendEnv.includes('JWT_ACCESS_SECRET=your_super_secret_access_key_here_change_in_production')) {
      issues.push('‚ùå Backend: JWT_ACCESS_SECRET v·∫´n s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh kh√¥ng an to√†n');
    }
    
    if (backendEnv.includes('JWT_REFRESH_SECRET=your_super_secret_refresh_key_here_change_in_production')) {
      issues.push('‚ùå Backend: JWT_REFRESH_SECRET v·∫´n s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh kh√¥ng an to√†n');
    }
    
    // Ki·ªÉm tra ƒë·ªô d√†i JWT secrets
    const accessMatch = backendEnv.match(/JWT_ACCESS_SECRET=(.+)/);
    const refreshMatch = backendEnv.match(/JWT_REFRESH_SECRET=(.+)/);
    
    if (accessMatch && accessMatch[1].length < 32) {
      warnings.push('‚ö†Ô∏è  Backend: JWT_ACCESS_SECRET qu√° ng·∫Øn (n√™n >= 32 k√Ω t·ª±)');
    }
    
    if (refreshMatch && refreshMatch[1].length < 32) {
      warnings.push('‚ö†Ô∏è  Backend: JWT_REFRESH_SECRET qu√° ng·∫Øn (n√™n >= 32 k√Ω t·ª±)');
    }
    
    // Ki·ªÉm tra JWT secrets c√≥ gi·ªëng nhau kh√¥ng
    if (accessMatch && refreshMatch && accessMatch[1] === refreshMatch[1]) {
      issues.push('‚ùå Backend: JWT_ACCESS_SECRET v√† JWT_REFRESH_SECRET gi·ªëng nhau (kh√¥ng an to√†n)');
    }
  } else {
    warnings.push('‚ö†Ô∏è  Backend: File .env kh√¥ng t·ªìn t·∫°i');
  }
  
  // Ki·ªÉm tra ƒë·ªìng b·ªô gi·ªØa frontend v√† backend
  if (fs.existsSync(frontendEnvPath) && fs.existsSync(backendEnvPath)) {
    const frontendEnv = fs.readFileSync(frontendEnvPath, 'utf8');
    const backendEnv = fs.readFileSync(backendEnvPath, 'utf8');
    
    const frontendAccessMatch = frontendEnv.match(/NEXT_PUBLIC_JWT_ACCESS_SECRET=(.+)/);
    const backendAccessMatch = backendEnv.match(/JWT_ACCESS_SECRET=(.+)/);
    
    if (frontendAccessMatch && backendAccessMatch && frontendAccessMatch[1] !== backendAccessMatch[1]) {
      warnings.push('‚ö†Ô∏è  JWT_ACCESS_SECRET kh√¥ng ƒë·ªìng b·ªô gi·ªØa frontend v√† backend');
    }
    
    const frontendRefreshMatch = frontendEnv.match(/NEXT_PUBLIC_JWT_REFRESH_SECRET=(.+)/);
    const backendRefreshMatch = backendEnv.match(/JWT_REFRESH_SECRET=(.+)/);
    
    if (frontendRefreshMatch && backendRefreshMatch && frontendRefreshMatch[1] !== backendRefreshMatch[1]) {
      warnings.push('‚ö†Ô∏è  JWT_REFRESH_SECRET kh√¥ng ƒë·ªìng b·ªô gi·ªØa frontend v√† backend');
    }
  }
  
  // Hi·ªÉn th·ªã k·∫øt qu·∫£
  console.log('\nüìä K·∫æT QU·∫¢ KI·ªÇM TRA B·∫¢O M·∫¨T:');
  console.log('=' .repeat(50));
  
  if (issues.length === 0 && warnings.length === 0) {
    console.log('‚úÖ T·∫•t c·∫£ JWT secrets ƒë·ªÅu an to√†n!');
  } else {
    if (issues.length > 0) {
      console.log('\nüö® V·∫§N ƒê·ªÄ NGHI√äM TR·ªåNG:');
      issues.forEach(issue => console.log(issue));
    }
    
    if (warnings.length > 0) {
      console.log('\n‚ö†Ô∏è  C·∫¢NH B√ÅO:');
      warnings.forEach(warning => console.log(warning));
    }
  }
  
  console.log('\nüí° KHUY·∫æN NGH·ªä:');
  console.log('- Ch·∫°y "npm run env:update" ƒë·ªÉ t·∫°o JWT secrets m·ªõi');
  console.log('- Ch·∫°y "npm run env:sync" ƒë·ªÉ ƒë·ªìng b·ªô JWT secrets gi·ªØa frontend v√† backend');
  console.log('- Kh√¥ng bao gi·ªù commit file .env v√†o git');
  console.log('- S·ª≠ d·ª•ng JWT secrets kh√°c nhau cho m√¥i tr∆∞·ªùng development v√† production');
  
  return {
    hasIssues: issues.length > 0,
    hasWarnings: warnings.length > 0,
    issues,
    warnings
  };
}

/**
 * T·ª± ƒë·ªông s·ª≠a c√°c v·∫•n ƒë·ªÅ b·∫£o m·∫≠t
 */
function autoFixSecurityIssues() {
  console.log('üîß T·ª± ƒë·ªông s·ª≠a c√°c v·∫•n ƒë·ªÅ b·∫£o m·∫≠t...');
  
  const { autoUpdateJWTSecrets } = require('./generate-env');
  const { syncJWTSecretsFromBackend } = require('./generate-env');
  
  try {
    // C·∫≠p nh·∫≠t JWT secrets frontend
    autoUpdateJWTSecrets();
    
    // ƒê·ªìng b·ªô t·ª´ backend
    syncJWTSecretsFromBackend();
    
    console.log('‚úÖ ƒê√£ t·ª± ƒë·ªông s·ª≠a c√°c v·∫•n ƒë·ªÅ b·∫£o m·∫≠t');
    return true;
  } catch (error) {
    console.error('‚ùå L·ªói khi t·ª± ƒë·ªông s·ª≠a:', error.message);
    return false;
  }
}

// Ch·∫°y script
if (require.main === module) {
  const command = process.argv[2];
  
  switch (command) {
    case 'fix':
      autoFixSecurityIssues();
      break;
    case 'check':
    default:
      checkJWTSecurity();
      break;
  }
}

module.exports = {
  checkJWTSecurity,
  autoFixSecurityIssues
};
