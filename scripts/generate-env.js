const crypto = require('crypto');
const fs = require('fs');
const path = require('path');

/**
 * T·ª± ƒë·ªông t·∫°o file .env.local v·ªõi JWT secrets ƒë∆∞·ª£c generate ng·∫´u nhi√™n cho frontend
 */
function generateJWTSecrets() {
  // T·∫°o JWT secrets ng·∫´u nhi√™n v·ªõi ƒë·ªô d√†i 64 k√Ω t·ª±
  const accessSecret = crypto.randomBytes(32).toString('hex');
  const refreshSecret = crypto.randomBytes(32).toString('hex');
  
  return { accessSecret, refreshSecret };
}

/**
 * T·∫°o n·ªôi dung file .env.local t·ª´ template
 */
function createEnvContent(accessSecret, refreshSecret) {
  return `# Frontend Environment Configuration
NEXT_PUBLIC_API_URL=http://localhost:4000/api
NEXT_PUBLIC_WS_URL=http://localhost:4000

# JWT Configuration (Auto-generated)
NEXT_PUBLIC_JWT_ACCESS_SECRET=${accessSecret}
NEXT_PUBLIC_JWT_REFRESH_SECRET=${refreshSecret}

# Firebase Configuration (C·∫ßn c·∫•u h√¨nh th·ªß c√¥ng)
NEXT_PUBLIC_FIREBASE_API_KEY=your_firebase_api_key_here
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=your_project.firebaseapp.com
NEXT_PUBLIC_FIREBASE_PROJECT_ID=your_project_id
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=your_project.appspot.com
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=123456789
NEXT_PUBLIC_FIREBASE_APP_ID=1:123456789:web:abcdef

# Development Settings
NODE_ENV=development
`;
}

/**
 * Ki·ªÉm tra v√† t·∫°o file .env.local n·∫øu ch∆∞a t·ªìn t·∫°i
 */
function ensureEnvFile() {
  const envPath = path.join(__dirname, '..', '.env.local');
  const envExamplePath = path.join(__dirname, '..', '.env.example');
  
  // N·∫øu file .env.local ƒë√£ t·ªìn t·∫°i, kh√¥ng l√†m g√¨
  if (fs.existsSync(envPath)) {
    console.log('‚úÖ File .env.local ƒë√£ t·ªìn t·∫°i');
    return;
  }
  
  console.log('üîß T·∫°o file .env.local m·ªõi...');
  
  // T·∫°o JWT secrets m·ªõi
  const { accessSecret, refreshSecret } = generateJWTSecrets();
  
  // T·∫°o n·ªôi dung file .env.local
  const envContent = createEnvContent(accessSecret, refreshSecret);
  
  // Ghi file .env.local
  fs.writeFileSync(envPath, envContent, 'utf8');
  
  console.log('‚úÖ ƒê√£ t·∫°o file .env.local v·ªõi JWT secrets m·ªõi');
  console.log('üîë NEXT_PUBLIC_JWT_ACCESS_SECRET:', accessSecret.substring(0, 8) + '...');
  console.log('üîë NEXT_PUBLIC_JWT_REFRESH_SECRET:', refreshSecret.substring(0, 8) + '...');
  console.log('‚ö†Ô∏è  L∆∞u √Ω: C·∫ßn c·∫•u h√¨nh Firebase credentials th·ªß c√¥ng');
}

/**
 * C·∫≠p nh·∫≠t JWT secrets trong file .env.local hi·ªán c√≥
 */
function updateJWTSecrets() {
  const envPath = path.join(__dirname, '..', '.env.local');
  
  if (!fs.existsSync(envPath)) {
    console.log('‚ùå File .env.local kh√¥ng t·ªìn t·∫°i. Ch·∫°y ensureEnvFile() tr∆∞·ªõc.');
    return;
  }
  
  console.log('üîÑ C·∫≠p nh·∫≠t JWT secrets...');
  
  // ƒê·ªçc file .env.local hi·ªán t·∫°i
  let envContent = fs.readFileSync(envPath, 'utf8');
  
  // T·∫°o JWT secrets m·ªõi
  const { accessSecret, refreshSecret } = generateJWTSecrets();
  
  // C·∫≠p nh·∫≠t JWT secrets
  envContent = envContent.replace(
    /NEXT_PUBLIC_JWT_ACCESS_SECRET=.*/,
    `NEXT_PUBLIC_JWT_ACCESS_SECRET=${accessSecret}`
  );
  envContent = envContent.replace(
    /NEXT_PUBLIC_JWT_REFRESH_SECRET=.*/,
    `NEXT_PUBLIC_JWT_REFRESH_SECRET=${refreshSecret}`
  );
  
  // Ghi l·∫°i file
  fs.writeFileSync(envPath, envContent, 'utf8');
  
  console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t JWT secrets');
  console.log('üîë NEXT_PUBLIC_JWT_ACCESS_SECRET:', accessSecret.substring(0, 8) + '...');
  console.log('üîë NEXT_PUBLIC_JWT_REFRESH_SECRET:', refreshSecret.substring(0, 8) + '...');
}

/**
 * Ki·ªÉm tra v√† t·ª± ƒë·ªông c·∫≠p nh·∫≠t JWT secrets n·∫øu ch√∫ng kh√¥ng an to√†n
 */
function checkAndUpdateUnsafeSecrets() {
  const envPath = path.join(__dirname, '..', '.env.local');
  
  if (!fs.existsSync(envPath)) {
    console.log('‚ùå File .env.local kh√¥ng t·ªìn t·∫°i. Ch·∫°y ensureEnvFile() tr∆∞·ªõc.');
    return false;
  }
  
  // ƒê·ªçc file .env.local hi·ªán t·∫°i
  const envContent = fs.readFileSync(envPath, 'utf8');
  
  // Ki·ªÉm tra xem c√≥ JWT secrets kh√¥ng an to√†n kh√¥ng
  const hasUnsafeAccessSecret = envContent.includes('NEXT_PUBLIC_JWT_ACCESS_SECRET=your_super_secret_access_key_here_change_in_production');
  const hasUnsafeRefreshSecret = envContent.includes('NEXT_PUBLIC_JWT_REFRESH_SECRET=your_super_secret_refresh_key_here_change_in_production');
  
  if (hasUnsafeAccessSecret || hasUnsafeRefreshSecret) {
    console.log('‚ö†Ô∏è  Ph√°t hi·ªán JWT secrets kh√¥ng an to√†n!');
    console.log('üîÑ T·ª± ƒë·ªông c·∫≠p nh·∫≠t JWT secrets...');
    updateJWTSecrets();
    return true;
  }
  
  console.log('‚úÖ JWT secrets ƒë√£ an to√†n');
  return false;
}

/**
 * T·ª± ƒë·ªông c·∫≠p nh·∫≠t JWT secrets m·ªói khi kh·ªüi ƒë·ªông ·ª©ng d·ª•ng
 */
function autoUpdateJWTSecrets() {
  console.log('üîç Ki·ªÉm tra JWT secrets...');
  
  // Ki·ªÉm tra v√† c·∫≠p nh·∫≠t n·∫øu c·∫ßn
  const wasUpdated = checkAndUpdateUnsafeSecrets();
  
  if (wasUpdated) {
    console.log('üîÑ JWT secrets ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª± ƒë·ªông');
  } else {
    console.log('‚úÖ JWT secrets ƒë√£ s·∫µn s√†ng');
  }
}

/**
 * ƒê·ªìng b·ªô JWT secrets t·ª´ backend
 */
function syncJWTSecretsFromBackend() {
  const backendEnvPath = path.join(__dirname, '..', '..', 'HOI_THAO_BE', '.env');
  const frontendEnvPath = path.join(__dirname, '..', '.env.local');
  
  if (!fs.existsSync(backendEnvPath)) {
    console.log('‚ùå File .env backend kh√¥ng t·ªìn t·∫°i');
    return false;
  }
  
  console.log('üîÑ ƒê·ªìng b·ªô JWT secrets t·ª´ backend...');
  
  // ƒê·ªçc JWT secrets t·ª´ backend
  const backendEnvContent = fs.readFileSync(backendEnvPath, 'utf8');
  const accessMatch = backendEnvContent.match(/JWT_ACCESS_SECRET=(.+)/);
  const refreshMatch = backendEnvContent.match(/JWT_REFRESH_SECRET=(.+)/);
  
  if (!accessMatch || !refreshMatch) {
    console.log('‚ùå Kh√¥ng t√¨m th·∫•y JWT secrets trong backend');
    return false;
  }
  
  const accessSecret = accessMatch[1];
  const refreshSecret = refreshMatch[1];
  
  // ƒê·ªçc ho·∫∑c t·∫°o file .env.local frontend
  let frontendEnvContent = '';
  if (fs.existsSync(frontendEnvPath)) {
    frontendEnvContent = fs.readFileSync(frontendEnvPath, 'utf8');
  } else {
    frontendEnvContent = createEnvContent(accessSecret, refreshSecret);
  }
  
  // C·∫≠p nh·∫≠t JWT secrets
  frontendEnvContent = frontendEnvContent.replace(
    /NEXT_PUBLIC_JWT_ACCESS_SECRET=.*/,
    `NEXT_PUBLIC_JWT_ACCESS_SECRET=${accessSecret}`
  );
  frontendEnvContent = frontendEnvContent.replace(
    /NEXT_PUBLIC_JWT_REFRESH_SECRET=.*/,
    `NEXT_PUBLIC_JWT_REFRESH_SECRET=${refreshSecret}`
  );
  
  // Ghi file
  fs.writeFileSync(frontendEnvPath, frontendEnvContent, 'utf8');
  
  console.log('‚úÖ ƒê√£ ƒë·ªìng b·ªô JWT secrets t·ª´ backend');
  console.log('üîë NEXT_PUBLIC_JWT_ACCESS_SECRET:', accessSecret.substring(0, 8) + '...');
  console.log('üîë NEXT_PUBLIC_JWT_REFRESH_SECRET:', refreshSecret.substring(0, 8) + '...');
  
  return true;
}

// Ch·∫°y script
if (require.main === module) {
  const command = process.argv[2];
  
  switch (command) {
    case 'update':
      updateJWTSecrets();
      break;
    case 'check':
      checkAndUpdateUnsafeSecrets();
      break;
    case 'auto':
      autoUpdateJWTSecrets();
      break;
    case 'sync':
      syncJWTSecretsFromBackend();
      break;
    case 'ensure':
    default:
      ensureEnvFile();
      break;
  }
}

module.exports = {
  generateJWTSecrets,
  createEnvContent,
  ensureEnvFile,
  updateJWTSecrets,
  checkAndUpdateUnsafeSecrets,
  autoUpdateJWTSecrets,
  syncJWTSecretsFromBackend
};
