// Using fetch from browser or node 18+

const API_BASE = "http://localhost:3001/api";

// Test data for creating multiple sessions
const testSessions = [
  {
    title: "Phi√™n 1 - C√¥ng ngh·ªá AI",
    description: "Th·∫£o lu·∫≠n v·ªÅ tr√≠ tu·ªá nh√¢n t·∫°o trong doanh nghi·ªáp",
    speaker: "Nguy·ªÖn VƒÉn A",
    speakerEmail: "nguyenvana@example.com",
    startTime: "2024-12-20T09:00:00.000Z",
    endTime: "2024-12-20T10:30:00.000Z",
    room: "Ph√≤ng A101",
    track: "AI/ML",
    capacity: 50,
    tags: ["AI", "Machine Learning", "Business"],
  },
  {
    title: "Phi√™n 2 - Blockchain",
    description: "·ª®ng d·ª•ng blockchain trong t√†i ch√≠nh",
    speaker: "Tr·∫ßn Th·ªã B",
    speakerEmail: "tranthib@example.com",
    startTime: "2024-12-20T11:00:00.000Z",
    endTime: "2024-12-20T12:30:00.000Z",
    room: "Ph√≤ng A102",
    track: "Blockchain",
    capacity: 40,
    tags: ["Blockchain", "Finance", "Cryptocurrency"],
  },
  {
    title: "Phi√™n 3 - Cloud Computing",
    description: "D·ªãch v·ª• ƒë√°m m√¢y v√† microservices",
    speaker: "L√™ VƒÉn C",
    speakerEmail: "levanc@example.com",
    startTime: "2024-12-20T14:00:00.000Z",
    endTime: "2024-12-20T15:30:00.000Z",
    room: "Ph√≤ng A103",
    track: "Cloud",
    capacity: 60,
    tags: ["Cloud", "Microservices", "DevOps"],
  },
  {
    title: "Phi√™n 4 - Mobile Development",
    description: "Ph√°t tri·ªÉn ·ª©ng d·ª•ng di ƒë·ªông cross-platform",
    speaker: "Ph·∫°m Th·ªã D",
    speakerEmail: "phamthid@example.com",
    startTime: "2024-12-21T09:00:00.000Z",
    endTime: "2024-12-21T10:30:00.000Z",
    room: "Ph√≤ng B101",
    track: "Mobile",
    capacity: 45,
    tags: ["Mobile", "React Native", "Flutter"],
  },
  {
    title: "Phi√™n 5 - Data Science",
    description: "Ph√¢n t√≠ch d·ªØ li·ªáu l·ªõn v√† machine learning",
    speaker: "Ho√†ng VƒÉn E",
    speakerEmail: "hoangvane@example.com",
    startTime: "2024-12-21T11:00:00.000Z",
    endTime: "2024-12-21T12:30:00.000Z",
    room: "Ph√≤ng B102",
    track: "Data Science",
    capacity: 55,
    tags: ["Data Science", "Big Data", "Analytics"],
  },
  {
    title: "Phi√™n 6 - Web Development",
    description: "Xu h∆∞·ªõng ph√°t tri·ªÉn web hi·ªán ƒë·∫°i",
    speaker: "V≈© Th·ªã F",
    speakerEmail: "vuthif@example.com",
    startTime: "2024-12-21T14:00:00.000Z",
    endTime: "2024-12-21T15:30:00.000Z",
    room: "Ph√≤ng B103",
    track: "Web",
    capacity: 50,
    tags: ["Web", "React", "Vue.js"],
  },
  {
    title: "Phi√™n 7 - Cybersecurity",
    description: "B·∫£o m·∫≠t th√¥ng tin v√† an ninh m·∫°ng",
    speaker: "ƒê·∫∑ng VƒÉn G",
    speakerEmail: "dangvang@example.com",
    startTime: "2024-12-22T09:00:00.000Z",
    endTime: "2024-12-22T10:30:00.000Z",
    room: "Ph√≤ng C101",
    track: "Security",
    capacity: 35,
    tags: ["Security", "Cybersecurity", "Privacy"],
  },
  {
    title: "Phi√™n 8 - IoT",
    description: "Internet of Things v√† smart cities",
    speaker: "B√πi Th·ªã H",
    speakerEmail: "buithih@example.com",
    startTime: "2024-12-22T11:00:00.000Z",
    endTime: "2024-12-22T12:30:00.000Z",
    room: "Ph√≤ng C102",
    track: "IoT",
    capacity: 40,
    tags: ["IoT", "Smart Cities", "Sensors"],
  },
  {
    title: "Phi√™n 9 - DevOps",
    description: "DevOps v√† CI/CD pipeline",
    speaker: "Ng√¥ VƒÉn I",
    speakerEmail: "ngovani@example.com",
    startTime: "2024-12-22T14:00:00.000Z",
    endTime: "2024-12-22T15:30:00.000Z",
    room: "Ph√≤ng C103",
    track: "DevOps",
    capacity: 45,
    tags: ["DevOps", "CI/CD", "Automation"],
  },
  {
    title: "Phi√™n 10 - UI/UX Design",
    description: "Thi·∫øt k·∫ø giao di·ªán ng∆∞·ªùi d√πng hi·ªán ƒë·∫°i",
    speaker: "L√Ω Th·ªã K",
    speakerEmail: "lythik@example.com",
    startTime: "2024-12-23T09:00:00.000Z",
    endTime: "2024-12-23T10:30:00.000Z",
    room: "Ph√≤ng D101",
    track: "Design",
    capacity: 30,
    tags: ["UI/UX", "Design", "User Experience"],
  },
  {
    title: "Phi√™n 11 - Database",
    description: "Qu·∫£n l√Ω c∆° s·ªü d·ªØ li·ªáu hi·ªán ƒë·∫°i",
    speaker: "ƒêinh VƒÉn L",
    speakerEmail: "dinhvanl@example.com",
    startTime: "2024-12-23T11:00:00.000Z",
    endTime: "2024-12-23T12:30:00.000Z",
    room: "Ph√≤ng D102",
    track: "Database",
    capacity: 50,
    tags: ["Database", "SQL", "NoSQL"],
  },
  {
    title: "Phi√™n 12 - Testing",
    description: "Ki·ªÉm th·ª≠ ph·∫ßn m·ªÅm t·ª± ƒë·ªông",
    speaker: "V√µ Th·ªã M",
    speakerEmail: "vothim@example.com",
    startTime: "2024-12-23T14:00:00.000Z",
    endTime: "2024-12-23T15:30:00.000Z",
    room: "Ph√≤ng D103",
    track: "Testing",
    capacity: 40,
    tags: ["Testing", "Automation", "QA"],
  },
];

async function createTestSessions() {
  try {
    console.log("üöÄ B·∫Øt ƒë·∫ßu t·∫°o phi√™n test...");

    // First, get conferences to get a conference ID
    const conferencesResponse = await fetch(`${API_BASE}/conferences`);
    const conferences = await conferencesResponse.json();

    if (!conferences.data || conferences.data.length === 0) {
      console.log(
        "‚ùå Kh√¥ng t√¨m th·∫•y h·ªôi ngh·ªã n√†o. Vui l√≤ng t·∫°o h·ªôi ngh·ªã tr∆∞·ªõc."
      );
      return;
    }

    const conferenceId = conferences.data[0].id;
    console.log(
      `üìã S·ª≠ d·ª•ng h·ªôi ngh·ªã: ${conferences.data[0].name} (ID: ${conferenceId})`
    );

    let successCount = 0;
    let errorCount = 0;

    for (let i = 0; i < testSessions.length; i++) {
      const session = testSessions[i];
      try {
        const response = await fetch(`${API_BASE}/sessions`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            conferenceId: conferenceId,
            ...session,
          }),
        });

        if (response.ok) {
          const result = await response.json();
          console.log(`‚úÖ T·∫°o phi√™n ${i + 1}: ${session.title}`);
          successCount++;
        } else {
          const error = await response.text();
          console.log(`‚ùå L·ªói t·∫°o phi√™n ${i + 1}: ${error}`);
          errorCount++;
        }
      } catch (error) {
        console.log(`‚ùå L·ªói t·∫°o phi√™n ${i + 1}: ${error.message}`);
        errorCount++;
      }

      // Small delay between requests
      await new Promise((resolve) => setTimeout(resolve, 100));
    }

    console.log(`\nüìä K·∫øt qu·∫£:`);
    console.log(`‚úÖ Th√†nh c√¥ng: ${successCount} phi√™n`);
    console.log(`‚ùå L·ªói: ${errorCount} phi√™n`);
    console.log(`üìù T·ªïng c·ªông: ${testSessions.length} phi√™n`);

    if (successCount > 0) {
      console.log(
        "\nüéâ Ho√†n th√†nh! B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ki·ªÉm tra ph√¢n trang t·∫°i:"
      );
      console.log("http://localhost:3000/sessions-management");
    }
  } catch (error) {
    console.error("‚ùå L·ªói:", error.message);
  }
}

// Run the script
createTestSessions();
